{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js","webpack:///./js/task3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","id","reject","canProcess","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAACC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAACC,GAAD,OAAUC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEzBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAEjBE,QAAQC,IAAI,qC,kCCdNE,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAACC,GAAD,OAChCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAE/D,OAAOhB,QAAQC,QAAQa,IAGnBX,EAAS,SAACW,GAAD,OAAkBT,QAAQY,MAAMH,IAW/CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GAEnCE,QAAQC,IAAI,kBC3BZ,IAIMY,EAAkB,SAACC,GACvB,IALiCC,EAAKC,EAKhCvB,GAL2BsB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAK5CK,EAAON,EAAPM,GAER,OAAO,IAAIzB,SAAQ,SAACC,EAASyB,GAC3B,IAAMC,EAAaL,KAAKE,SAAW,GAEnCtB,YAAW,WACLyB,GACF1B,EAAQ,CAAEwB,KAAI3B,UAGhB4B,EAAOD,KACN3B,OAID8B,EAAa,SAAC,GAAkB,IAAhBH,EAAgB,EAAhBA,GAAI3B,EAAY,EAAZA,MACxBO,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8C3B,EAA9C,OAGI+B,EAAW,SAACJ,GAChBpB,QAAQyB,KAAR,gCAA6CL,EAA7C,8BAcFP,EAAgB,CAAEO,GAAI,GAAIM,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEX,EAAgB,CAAEO,GAAI,GAAIM,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEX,EAAgB,CAAEO,GAAI,GAAIM,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAC/DX,EAAgB,CAAEO,GAAI,GAAIM,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChExB,QAAQC,IAAI,oB","file":"main.24c2dc9b0d9f0e89a34d.js","sourcesContent":["const delay = (ms) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\nconsole.log(\"Task 1 console after Task 2 and 3\");","const users = [\n  { name: \"Mango\", active: true },\n  { name: \"Poly\", active: false },\n  { name: \"Ajax\", active: true },\n  { name: \"Lux\", active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map((user) =>\n    user.name === userName ? { ...user, active: !user.active } : user\n  );\n  return Promise.resolve(updatedUsers);\n};\n\nconst logger = (updatedUsers) => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, \"Mango\", logger);\n// toggleUserState(users, \"Lux\", logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, \"Mango\").then(logger);\ntoggleUserState(users, \"Lux\").then(logger);\n\nconsole.log(\"Task 2 console\");","\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  const { id } = transaction;\n\n  return new Promise((resolve, reject) => {\n    const canProcess = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (canProcess) {\n        resolve({ id, delay });\n      }\n\n      reject(id);\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, delay }) => {\n  console.log(`Transaction ${id} processed in ${delay}ms`);\n};\n\nconst logError = (id) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\nconsole.log(\"Task 3 console\");"],"sourceRoot":""}